#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ZVT_ALCUBIERRE_RESONANCE_HUNTER.py - Zeta/Alcubierre resonance hunter with file loading
Author: Jefferson M. Okushigue
Date: 2025-08-09
"""

import numpy as np
from mpmath import mp
import time
from concurrent.futures import ProcessPoolExecutor
import pickle
import os
import signal
import sys
from datetime import datetime
from scipy import stats
from scipy.stats import kstest, anderson
import warnings
import math

warnings.filterwarnings("ignore", category=RuntimeWarning)

# Configuration
mp.dps = 50  # High precision

# Constantes f√≠sicas fundamentais para Alcubierre
C_LIGHT = 299792458  # m/s
G_GRAVITY = 6.67430e-11  # m¬≥‚ãÖkg‚Åª¬π‚ãÖs‚Åª¬≤
H_PLANCK = 6.62607015e-34  # J‚ãÖs
H_BAR = H_PLANCK / (2 * math.pi)
ALPHA = 7.2973525693e-3  # Estrutura fina

# Par√¢metros caracter√≠sticos da m√©trica de Alcubierre
# Velocidades de distor√ß√£o superluminais
V_WARP_2C = 2 * C_LIGHT       # 5.996e8 m/s
V_WARP_5C = 5 * C_LIGHT       # 1.499e9 m/s
V_WARP_10C = 10 * C_LIGHT     # 2.998e9 m/s
V_WARP_100C = 100 * C_LIGHT   # 2.998e10 m/s

# Raios de bolha caracter√≠sticos
R_PLANCK = 1.616e-35    # m
R_ATOMIC = 1e-10        # m
R_NUCLEAR = 1e-15       # m
R_EARTH = 6.371e6       # m
R_SOLAR = 6.96e8        # m

# Densidades de energia ex√≥tica
RHO_PLANCK = C_LIGHT**4 / (8 * math.pi * G_GRAVITY * H_PLANCK)  # 7.267e75 kg/m¬≥
RHO_NUCLEAR = 2.3e17    # kg/m¬≥
RHO_VACUUM = 9.3e-27    # kg/m¬≥

# Fatores geom√©tricos da m√©trica
SIGMA_FACTOR = math.tanh(1)                    # 0.7616
THETA_FACTOR = (1/math.cosh(1))**2            # 0.4199 (sech¬≤)
F_SHAPE = 1 / (1 + math.exp(1))               # 0.2689

# Par√¢metros de efici√™ncia Alcubierre
ETA_OPTIMAL = 1/(4*math.pi)                   # 0.0796
BETA_EXPANSION = math.sqrt(2/math.pi)         # 0.7979
EPSILON_CAUSALITY = 1/(2*math.pi)             # 0.1592

# Escalas de energia e frequ√™ncia
E_WARP_PLANCK = H_PLANCK * C_LIGHT / R_PLANCK # Energia escala Planck
F_WARP_PLANCK = C_LIGHT / R_PLANCK            # Frequ√™ncia de Planck

# Constantes principais para an√°lise - valores na escala dos zeros
ALCUBIERRE_CONSTANT = V_WARP_10C / 1e8  # ~30 (escala compat√≠vel)
WARP_GEOMETRY = SIGMA_FACTOR * 10       # ~7.6
EXOTIC_DENSITY = RHO_NUCLEAR / 1e15     # ~230

TOLERANCE_LEVELS = [1e-6, 1e-7, 1e-8, 1e-9, 1e-10, 1e-11]  # Toler√¢ncias relativas
DEFAULT_TOLERANCE = 1e-8
INCREMENT = 1000  # Batch size for processing

# Constantes de controle para valida√ß√£o estat√≠stica
CONTROL_CONSTANTS = {
    'alcubierre_vel': V_WARP_10C / 1e8,      # ~30
    'warp_geometry': SIGMA_FACTOR * 10,       # ~7.6
    'exotic_density': RHO_NUCLEAR / 1e15,    # ~230
    'warp_efficiency': ETA_OPTIMAL * 100,     # ~7.96
    'expansion_factor': BETA_EXPANSION * 10,  # ~7.98
    'causality_limit': EPSILON_CAUSALITY * 100, # ~15.92
    'planck_ratio': E_WARP_PLANCK / 1e8,     # Escala Planck normalizada
    'random_1': 25.5,
    'random_2': 31.8,
    'random_3': 7.2,
    'random_4': 150.0,
}

MAX_WORKERS = os.cpu_count()
CACHE_FILE = "zeta_zeros_cache.pkl"
STATS_FILE = "zvt_alcubierre_stats.txt"
RESULTS_DIR = "zvt_alcubierre_results"
ZEROS_FILE = os.path.expanduser("~/Downloads/zero.txt")  # Path to the zeros file

# Parameters for analysis
FRESH_START_ZEROS = 5000
MINIMUM_FOR_STATS = 1000

# Create results directory if it doesn't exist
if not os.path.exists(RESULTS_DIR):
    os.makedirs(RESULTS_DIR)

# Global variable for shutdown control
shutdown_requested = False

def signal_handler(signum, frame):
    global shutdown_requested
    print(f"\n‚è∏Ô∏è Shutdown solicitado. Completando lote atual e salvando...")
    shutdown_requested = True

def load_zeros_from_file(filename):
    zeros = []
    try:
        print(f"üìÇ Carregando zeros do arquivo: {filename}")
        with open(filename, 'r') as f:
            for line_num, line in enumerate(f, start=1):
                if shutdown_requested:
                    break
                line = line.strip()
                if line:
                    try:
                        zero = float(line)
                        zeros.append((line_num, zero))  # Format: (index, value)
                    except ValueError:
                        print(f"‚ö†Ô∏è Linha inv√°lida {line_num}: '{line}'")
                        continue
        print(f"‚úÖ {len(zeros):,} zeros carregados")
        return zeros
    except Exception as e:
        print(f"‚ùå Erro ao ler arquivo: {e}")
        return []

def save_enhanced_cache(zeros, backup=True):
    try:
        if backup and os.path.exists(CACHE_FILE):
            backup_file = f"{CACHE_FILE}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            os.rename(CACHE_FILE, backup_file)
            print(f"üì¶ Backup do cache criado: {backup_file}")
        with open(CACHE_FILE, 'wb') as f:
            pickle.dump(zeros, f, protocol=pickle.HIGHEST_PROTOCOL)
        print(f"üíæ Cache salvo: {len(zeros)} zeros")
    except Exception as e:
        print(f"‚ùå Erro ao salvar cache: {e}")

def load_enhanced_cache():
    if os.path.exists(CACHE_FILE):
        try:
            with open(CACHE_FILE, 'rb') as f:
                data = pickle.load(f)
                if isinstance(data, list) and len(data) > 0:
                    print(f"‚úÖ Cache v√°lido: {len(data):,} zeros carregados")
                    return data
        except:
            print("‚ö†Ô∏è Cache inv√°lido, carregando do arquivo...")
    zeros = load_zeros_from_file(ZEROS_FILE)
    if zeros:
        save_enhanced_cache(zeros)
        return zeros[:FRESH_START_ZEROS] if FRESH_START_ZEROS > 0 else zeros
    return []

def find_multi_tolerance_resonances(zeros, constants_dict=None):
    if constants_dict is None:
        constants_dict = {'alcubierre_vel': ALCUBIERRE_CONSTANT}
    all_results = {}
    for const_name, const_value in constants_dict.items():
        all_results[const_name] = {}
        for tolerance in TOLERANCE_LEVELS:
            resonances = []
            for n, gamma in zeros:
                mod_val = gamma % const_value
                min_distance = min(mod_val, const_value - mod_val)
                relative_error = min_distance / const_value  # Erro relativo
                if relative_error < tolerance:
                    resonances.append((n, gamma, min_distance, tolerance, relative_error))
            all_results[const_name][tolerance] = resonances
    return all_results

def enhanced_statistical_analysis(zeros, resonances, constant_value, tolerance):
    if len(zeros) == 0 or len(resonances) == 0:
        return None
    total_zeros = len(zeros)
    resonant_count = len(resonances)
    expected_random = total_zeros * (2 * tolerance)  # Toler√¢ncia relativa
    results = {
        'basic_stats': {
            'total_zeros': total_zeros,
            'resonant_count': resonant_count,
            'expected_random': expected_random,
            'resonance_rate': resonant_count / total_zeros,
            'significance_factor': resonant_count / expected_random if expected_random > 0 else float('inf')
        }
    }
    if expected_random >= 5:
        chi2_stat = (resonant_count - expected_random)**2 / expected_random
        chi2_pvalue = 1 - stats.chi2.cdf(chi2_stat, df=1)
        results['chi2_test'] = {
            'statistic': chi2_stat,
            'p_value': chi2_pvalue,
            'critical_value_05': 3.841,
            'significant': chi2_stat > 3.841
        }
    p_expected = 2 * tolerance  # Toler√¢ncia j√° √© relativa
    try:
        binom_result = stats.binomtest(resonant_count, total_zeros, p_expected, alternative='two-sided')
        binom_pvalue = binom_result.pvalue
    except AttributeError:
        try:
            binom_pvalue = stats.binom_test(resonant_count, total_zeros, p_expected, alternative='two-sided')
        except AttributeError:
            from scipy.stats import binom
            binom_pvalue = 2 * min(binom.cdf(resonant_count, total_zeros, p_expected),
                                  1 - binom.cdf(resonant_count - 1, total_zeros, p_expected))
    results['binomial_test'] = {
        'p_value': binom_pvalue,
        'significant': binom_pvalue < 0.05
    }
    poisson_pvalue = 1 - stats.poisson.cdf(resonant_count - 1, expected_random)
    results['poisson_test'] = {
        'p_value': poisson_pvalue,
        'significant': poisson_pvalue < 0.05
    }
    return results

def comparative_constant_analysis(zeros, tolerance=DEFAULT_TOLERANCE):
    multi_results = find_multi_tolerance_resonances(zeros, CONTROL_CONSTANTS)
    comparative_stats = {}
    for const_name, const_results in multi_results.items():
        if tolerance in const_results:
            resonances = const_results[tolerance]
            const_value = CONTROL_CONSTANTS[const_name]
            stats_result = enhanced_statistical_analysis(zeros, resonances, const_value, tolerance)
            comparative_stats[const_name] = {
                'constant_value': const_value,
                'resonance_count': len(resonances),
                'resonance_rate': len(resonances) / len(zeros) * 100,
                'stats': stats_result
            }
    return comparative_stats

def analyze_batch_enhanced(zeros, batch_num):
    print(f"\nüî¨ LOTE #{batch_num}: {len(zeros):,} zeros")
    if len(zeros) < MINIMUM_FOR_STATS:
        print(f"   üìä Necess√°rio {MINIMUM_FOR_STATS - len(zeros):,} mais zeros para estat√≠sticas")
        alcubierre_results = find_multi_tolerance_resonances(zeros, {'alcubierre_vel': ALCUBIERRE_CONSTANT})['alcubierre_vel']
        tolerance_summary = {}
        for tolerance in TOLERANCE_LEVELS[:3]:
            if tolerance in alcubierre_results:
                resonances = alcubierre_results[tolerance]
                count = len(resonances)
                rate = count / len(zeros) * 100 if len(zeros) > 0 else 0
                tolerance_summary[tolerance] = {
                    'count': count,
                    'rate': rate,
                    'best_quality': min(r[4] for r in resonances) if count > 0 else None,  # Erro relativo
                    'resonances': resonances,
                    'stats': None
                }
        print(f"\nüìä RESSON√ÇNCIAS B√ÅSICAS (ALCUBIERRE):")
        print("| Toler√¢ncia | Contagem | Taxa (%) |")
        print("|------------|----------|----------|")
        for tolerance in TOLERANCE_LEVELS[:3]:
            if tolerance in tolerance_summary:
                data = tolerance_summary[tolerance]
                print(f"| {tolerance:8.0e} | {data['count']:8d} | {data['rate']:8.3f} |")
        return tolerance_summary, {}, None
    
    alcubierre_results = find_multi_tolerance_resonances(zeros, {'alcubierre_vel': ALCUBIERRE_CONSTANT})['alcubierre_vel']
    print(f"\nüìä RESSON√ÇNCIAS ALCUBIERRE POR TOLER√ÇNCIA (Velocidade Warp = {ALCUBIERRE_CONSTANT:.3f}):")
    print("| Toler√¢ncia | Contagem | Taxa (%) | Melhor Qualidade | Signific√¢ncia |")
    print("|------------|----------|----------|------------------|---------------|")
    tolerance_summary = {}
    for tolerance in TOLERANCE_LEVELS:
        if tolerance in alcubierre_results:
            resonances = alcubierre_results[tolerance]
            count = len(resonances)
            rate = count / len(zeros) * 100
            if count > 0:
                best_quality = min(r[4] for r in resonances)  # Erro relativo
                stats_result = enhanced_statistical_analysis(zeros, resonances, ALCUBIERRE_CONSTANT, tolerance)
                sig_factor = stats_result['basic_stats']['significance_factor'] if stats_result else 0
                tolerance_summary[tolerance] = {
                    'count': count,
                    'rate': rate,
                    'best_quality': best_quality,
                    'significance': sig_factor,
                    'resonances': resonances,
                    'stats': stats_result
                }
                print(f"| {tolerance:8.0e} | {count:8d} | {rate:8.3f} | {best_quality:.3e} | {sig_factor:8.2f}x |")
            else:
                tolerance_summary[tolerance] = {
                    'count': 0, 'rate': 0, 'best_quality': None,
                    'significance': 0, 'resonances': [], 'stats': None
                }
                print(f"| {tolerance:8.0e} | {count:8d} | {rate:8.3f} |      N/A     |     N/A    |")
    
    print(f"\nüéõÔ∏è COMPARA√á√ÉO DE PAR√ÇMETROS ALCUBIERRE (Toler√¢ncia: {DEFAULT_TOLERANCE}):")
    comparative_results = comparative_constant_analysis(zeros, DEFAULT_TOLERANCE)
    print("| Par√¢metro     | Valor          | Contagem | Taxa (%) | Signific√¢ncia |")
    print("|---------------|----------------|----------|----------|---------------|")
    for const_name, results in comparative_results.items():
        count = results['resonance_count']
        rate = results['resonance_rate']
        sig_factor = results['stats']['basic_stats']['significance_factor'] if results['stats'] else 0
        value = results['constant_value']
        value_str = f"{value:.3f}"
        print(f"| {const_name:13s} | {value_str:14s} | {count:8d} | {rate:8.3f} | {sig_factor:8.2f}x |")
    
    best_overall = None
    if DEFAULT_TOLERANCE in tolerance_summary and tolerance_summary[DEFAULT_TOLERANCE]['resonances']:
        best_overall = min(tolerance_summary[DEFAULT_TOLERANCE]['resonances'], key=lambda x: x[4])  # Por erro relativo
        print(f"\nüíé MELHOR RESSON√ÇNCIA ALCUBIERRE (Toler√¢ncia: {DEFAULT_TOLERANCE}):")
        print(f"   Zero #{best_overall[0]:,} ‚Üí Œ≥ = {best_overall[1]:.15f}")
        print(f"   Œ≥ mod (v_warp) = {best_overall[2]:.15e}")
        print(f"   Erro relativo: {best_overall[4]:.15e} ({best_overall[4]*100:.12f}%)")
        print(f"   Fator de distor√ß√£o: Œ≥ = {best_overall[1]/ALCUBIERRE_CONSTANT:.6f} √ó v_warp")
        print(f"   Velocidade superluminal: v = {best_overall[1]/ALCUBIERRE_CONSTANT:.3e} √ó 10c")
        print(f"   Energia ex√≥tica requerida: œÅ ‚àù Œ≥¬≤")
    
    if DEFAULT_TOLERANCE in tolerance_summary and tolerance_summary[DEFAULT_TOLERANCE]['stats']:
        stats = tolerance_summary[DEFAULT_TOLERANCE]['stats']
        print(f"\nüìà TESTES ESTAT√çSTICOS ALCUBIERRE (Toler√¢ncia: {DEFAULT_TOLERANCE}):")
        if 'chi2_test' in stats:
            chi2 = stats['chi2_test']
            print(f"   Qui-quadrado: œá¬≤ = {chi2['statistic']:.3f}, p = {chi2['p_value']:.6f}, Significativo: {'Sim' if chi2['significant'] else 'N√£o'}")
        if 'binomial_test' in stats:
            binom = stats['binomial_test']
            print(f"   Binomial: p = {binom['p_value']:.6f}, Significativo: {'Sim' if binom['significant'] else 'N√£o'}")
    
    return tolerance_summary, comparative_results, best_overall

def generate_comprehensive_report(zeros, session_results, final_batch):
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    report_file = os.path.join(RESULTS_DIR, f"Relatorio_Alcubierre_{timestamp}.txt")
    final_tolerance_analysis, final_comparative, final_best = analyze_batch_enhanced(zeros, final_batch)
    
    with open(report_file, 'w', encoding='utf-8') as f:
        f.write("="*80 + "\n")
        f.write("ZVT ALCUBIERRE RESONANCE HUNTER - RELAT√ìRIO COMPREENSIVO\n")
        f.write("="*80 + "\n\n")
        f.write(f"Data: {datetime.now().isoformat()}\n")
        f.write(f"Vers√£o: Alcubierre Hunter v1.0\n")
        f.write(f"Lote Final: #{final_batch}\n")
        f.write(f"Zeros Analisados: {len(zeros):,}\n")
        f.write(f"Arquivo de Origem: {ZEROS_FILE}\n\n")
        f.write("CONFIGURA√á√ÉO ALCUBIERRE:\n")
        f.write(f"Velocidade da Luz (c): {C_LIGHT:.15e} m/s\n")
        f.write(f"Velocidade Warp 10c: {V_WARP_10C:.15e} m/s\n")
        f.write(f"Densidade de Planck: {RHO_PLANCK:.15e} kg/m¬≥\n")
        f.write(f"Densidade Nuclear: {RHO_NUCLEAR:.15e} kg/m¬≥\n")
        f.write(f"Raio de Planck: {R_PLANCK:.15e} m\n")
        f.write(f"Fator Geom√©trico œÉ: {SIGMA_FACTOR:.15f}\n")
        f.write(f"Efici√™ncia √ìtima Œ∑: {ETA_OPTIMAL:.15f}\n")
        f.write(f"Toler√¢ncias: {TOLERANCE_LEVELS}\n")
        f.write(f"Toler√¢ncia Padr√£o: {DEFAULT_TOLERANCE}\n")
        f.write(f"Precis√£o: {mp.dps} casas decimais\n\n")
        f.write("AN√ÅLISE MULTI-TOLER√ÇNCIA (ALCUBIERRE):\n")
        f.write("| Toler√¢ncia | Resson√¢ncias | Taxa (%) | Melhor Qualidade | Signific√¢ncia |\n")
        f.write("|------------|--------------|----------|------------------|---------------|\n")
        for tolerance in TOLERANCE_LEVELS:
            if tolerance in final_tolerance_analysis:
                data = final_tolerance_analysis[tolerance]
                best_quality = "N/A" if data['best_quality'] is None else f"{data['best_quality']:.3e}"
                significance = "N/A" if data['significance'] == 0 else f"{data['significance']:8.2f}"
                f.write(f"| {tolerance:8.0e} | {data['count']:10d} | {data['rate']:8.3f} | {best_quality:>11s} | {significance:>8s}x |\n")
        
        f.write(f"\nCOMPARA√á√ÉO DE PAR√ÇMETROS ALCUBIERRE (Toler√¢ncia: {DEFAULT_TOLERANCE}):\n")
        f.write("| Par√¢metro     | Valor              | Resson√¢ncias | Taxa (%) | Signific√¢ncia |\n")
        f.write("|---------------|--------------------|--------------|----------|---------------|\n")
        for const_name, results in final_comparative.items():
            value_str = f"{results['constant_value']:.6f}"
            sig_factor = results['stats']['basic_stats']['significance_factor'] if results['stats'] else 0
            f.write(f"| {const_name:13s} | {value_str:18s} | {results['resonance_count']:10d} | {results['resonance_rate']:8.3f} | {sig_factor:8.2f}x |\n")
        
        if final_best:
            f.write(f"\nMELHOR RESSON√ÇNCIA ALCUBIERRE:\n")
            f.write(f"√çndice do Zero: #{final_best[0]:,}\n")
            f.write(f"Valor Gamma: {final_best[1]:.20f}\n")
            f.write(f"Qualidade Absoluta: {final_best[2]:.20e}\n")
            f.write(f"Qualidade Relativa: {final_best[4]:.20e}\n")
            f.write(f"Erro Relativo: {final_best[4]*100:.12f}%\n")
            f.write(f"Fator de Distor√ß√£o: {final_best[1]/ALCUBIERRE_CONSTANT:.6e}\n")
            f.write(f"Velocidade Equivalente: {final_best[1]/ALCUBIERRE_CONSTANT:.3e} √ó 10c\n")
            f.write(f"Rela√ß√£o Ex√≥tica: Œ≥ = {final_best[1]/ALCUBIERRE_CONSTANT:.3e} √ó v_warp\n\n")
        else:
            f.write(f"\nNENHUMA RESSON√ÇNCIA ALCUBIERRE ENCONTRADA nas toler√¢ncias testadas.\n\n")
        
        if DEFAULT_TOLERANCE in final_tolerance_analysis and final_tolerance_analysis[DEFAULT_TOLERANCE]['stats']:
            stats = final_tolerance_analysis[DEFAULT_TOLERANCE]['stats']
            f.write("RESUMO ESTAT√çSTICO:\n")
            basic = stats['basic_stats']
            f.write(f"  Zeros Totais: {basic['total_zeros']:,}\n")
            f.write(f"  Zeros Ressonantes: {basic['resonant_count']:,}\n")
            f.write(f"  Esperado por Acaso: {basic['expected_random']:.1f}\n")
            f.write(f"  Taxa de Resson√¢ncia: {basic['resonance_rate']*100:.6f}%\n")
            f.write(f"  Signific√¢ncia: {basic['significance_factor']:.3f}x\n")
            if 'chi2_test' in stats:
                f.write(f"  Qui-quadrado: œá¬≤ = {stats['chi2_test']['statistic']:.3f}, p = {stats['chi2_test']['p_value']:.6f}\n")
            if 'binomial_test' in stats:
                f.write(f"  Binomial: p = {stats['binomial_test']['p_value']:.6f}\n")
        
        f.write("\nIMPLICA√á√ïES PARA F√çSICA EX√ìTICA:\n")
        f.write("1. Investigar conex√µes entre zeros de Riemann e propuls√£o superluminal\n")
        f.write("2. Analisar rela√ß√µes com geometria de distor√ß√£o espacial\n")
        f.write("3. Considerar implica√ß√µes para engenharia de mat√©ria ex√≥tica\n")
        f.write("4. Explorar conex√µes com estrutura fundamental do espa√ßo-tempo\n")
        f.write("5. Avaliar viabilidade de drives de distor√ß√£o baseados em zeros\n")
        f.write("="*80 + "\n")
    
    print(f"üìä Relat√≥rio Alcubierre salvo: {report_file}")
    return report_file

def infinite_hunter_alcubierre():
    global shutdown_requested
    print(f"üöÄ ZVT ALCUBIERRE RESONANCE HUNTER")
    print(f"üåå Velocidade Warp 10c = {V_WARP_10C:.3e} m/s")
    print(f"‚ö° Par√¢metro Principal = {ALCUBIERRE_CONSTANT:.3f}")
    print(f"üìÅ Arquivo: {ZEROS_FILE}")
    print(f"üìä Toler√¢ncias: {TOLERANCE_LEVELS}")
    print("üõë Ctrl+C para parar")
    print("=" * 80)
    
    all_zeros = load_enhanced_cache()
    current_count = len(all_zeros)
    if current_count == 0:
        print("‚ùå Nenhum zero carregado. Verifique o arquivo.")
        return [], [], None
    
    print(f"üìä Zeros dispon√≠veis: {current_count:,}")
    session_results = []
    best_overall = None
    batch_num = 1
    
    for i in range(0, current_count, INCREMENT):
        if shutdown_requested:
            break
        batch_start = i
        batch_end = min(i + INCREMENT, current_count)
        batch = all_zeros[batch_start:batch_end]
        print(f"\nüî¨ LOTE #{batch_num}: Zeros {batch_start:,} a {batch_end:,}")
        start_time = time.time()
        tolerance_analysis, comparative_analysis, batch_best = analyze_batch_enhanced(batch, batch_num)
        if batch_best and (not best_overall or batch_best[4] < best_overall[4]):  # Comparar por erro relativo
            best_overall = batch_best
            print(f"    üéØ NOVO MELHOR GLOBAL ALCUBIERRE!")
            print(f"    Zero #{best_overall[0]:,} ‚Üí Œ≥ mod v_warp = {best_overall[2]:.15e}")
        session_results.append({
            'batch': batch_num,
            'timestamp': datetime.now().isoformat(),
            'zeros_analyzed': batch_end,
            'batch_time': time.time() - start_time,
            'tolerance_analysis': tolerance_analysis,
            'comparative_analysis': comparative_analysis,
            'best_resonance': batch_best
        })
        batch_num += 1
    
    print(f"\nüìä Gerando relat√≥rio final Alcubierre...")
    generate_comprehensive_report(all_zeros, session_results, batch_num-1)
    return all_zeros, session_results, best_overall

def main():
    """Fun√ß√£o principal"""
    global shutdown_requested
    print("üåü Iniciando ZVT Alcubierre Resonance Hunter")
    
    try:
        zeros, results, best = infinite_hunter_alcubierre()
        
        if zeros and len(zeros) > 0:
            print(f"\nüéØ An√°lise Alcubierre Conclu√≠da!")
            print(f"üìÅ Resultados em: {RESULTS_DIR}/")
            print(f"üíæ Cache: {CACHE_FILE}")
            print(f"üìä Estat√≠sticas: {STATS_FILE}")
            
            if best:
                print(f"üèÜ Melhor resson√¢ncia: Zero #{best[0]:,} com qualidade relativa {best[4]:.3e}")
                print(f"üöÄ Fator Warp: Œ≥ = {best[1]/ALCUBIERRE_CONSTANT:.3e} √ó v_warp")
                print(f"‚ö° Velocidade superluminal: {best[1]/ALCUBIERRE_CONSTANT:.1f} √ó 10c")
            else:
                print(f"üìä Nenhuma resson√¢ncia Alcubierre excepcional encontrada")
                print(f"ü§î Zeros de Riemann podem ser independentes da m√©trica de distor√ß√£o")
                
    except KeyboardInterrupt:
        print(f"\n‚èπÔ∏è An√°lise interrompida. Progresso salvo.")
        
    except Exception as e:
        print(f"\n‚ùå Erro: {e}")
        import traceback
        traceback.print_exc()
        
    finally:
        print(f"\nüî¨ Sess√£o Alcubierre conclu√≠da!")

if __name__ == "__main__":
    shutdown_requested = False
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    main()
