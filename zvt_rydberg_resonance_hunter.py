#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ZVT_RYDBERG_RESONANCE_HUNTER.py - Zeta/Rydberg resonance hunter with file loading
Author: Jefferson M. Okushigue
Date: 2025-08-09
"""

import numpy as np
from mpmath import mp
import time
from concurrent.futures import ProcessPoolExecutor
import pickle
import os
import signal
import sys
from datetime import datetime
from scipy import stats
from scipy.stats import kstest, anderson
import warnings
import math

warnings.filterwarnings("ignore", category=RuntimeWarning)

# Configuration
mp.dps = 50  # High precision

# Constante de Rydberg e quantidades relacionadas
R_INFINITY = 10973731.568160  # m‚Åª¬π (CODATA 2018)
C_LIGHT = 299792458  # m/s
H_PLANCK = 6.62607015e-34  # J‚ãÖs
H_BAR = H_PLANCK / (2 * math.pi)
E_ELECTRON = 1.602176634e-19  # C
M_ELECTRON = 9.1093837015e-31  # kg
ALPHA = 7.2973525693e-3  # Estrutura fina

# Quantidades derivadas da constante de Rydberg
# Energia de Rydberg: E_Ry = hc R‚àû
E_RYDBERG = H_PLANCK * C_LIGHT * R_INFINITY  # ‚âà 2.18e-18 J ‚âà 13.6 eV

# Comprimento de onda caracter√≠stico: Œª = 1/R‚àû
LAMBDA_RYDBERG = 1 / R_INFINITY  # ‚âà 9.11e-8 m ‚âà 91.1 nm

# Frequ√™ncia de Rydberg: ŒΩ = c R‚àû
FREQ_RYDBERG = C_LIGHT * R_INFINITY  # ‚âà 3.29e15 Hz

# Tempo caracter√≠stico: œÑ = 1/(c R‚àû)
TIME_RYDBERG = 1 / (C_LIGHT * R_INFINITY)  # ‚âà 3.04e-16 s

# Escalas normalizadas para compatibilidade com zeros de Riemann
R_SCALED = R_INFINITY / 1e6      # ‚âà 10.97 (escala dos zeros)
E_SCALED = E_RYDBERG * 1e18      # ‚âà 2.18 (energia em escala)
FREQ_SCALED = FREQ_RYDBERG / 1e15  # ‚âà 3.29 (frequ√™ncia em escala)
LAMBDA_SCALED = LAMBDA_RYDBERG * 1e8  # ‚âà 9.11 (comprimento de onda)

# Fatores relacionados √†s transi√ß√µes at√¥micas
LYMAN_FACTOR = R_INFINITY * (1 - 1/4) / 1e6    # S√©rie de Lyman (‚âà 8.23)
BALMER_FACTOR = R_INFINITY * (1/4 - 1/9) / 1e6  # S√©rie de Balmer (‚âà 1.52)
PASCHEN_FACTOR = R_INFINITY * (1/9 - 1/16) / 1e6 # S√©rie de Paschen (‚âà 0.53)

# Constante principal para an√°lise
RYDBERG_CONSTANT = R_SCALED  # ‚âà 10.97

TOLERANCE_LEVELS = [1e-6, 1e-7, 1e-8, 1e-9, 1e-10, 1e-11]  # Toler√¢ncias relativas
DEFAULT_TOLERANCE = 1e-8
INCREMENT = 1000  # Batch size for processing

# Constantes de controle para valida√ß√£o estat√≠stica
CONTROL_CONSTANTS = {
    'rydberg_scaled': R_SCALED,          # ‚âà 10.97
    'energy_scaled': E_SCALED,           # ‚âà 2.18
    'freq_scaled': FREQ_SCALED,          # ‚âà 3.29
    'lambda_scaled': LAMBDA_SCALED,      # ‚âà 9.11
    'lyman_series': LYMAN_FACTOR,        # ‚âà 8.23
    'balmer_series': BALMER_FACTOR,      # ‚âà 1.52
    'paschen_series': PASCHEN_FACTOR,    # ‚âà 0.53
    'alpha_scaled': ALPHA * 1000,        # ‚âà 7.30
    'random_1': 10.5,
    'random_2': 11.3,
    'random_3': 8.7,
    'random_4': 12.4,
}

MAX_WORKERS = os.cpu_count()
CACHE_FILE = "zeta_zeros_cache.pkl"
STATS_FILE = "zvt_rydberg_stats.txt"
RESULTS_DIR = "zvt_rydberg_results"
ZEROS_FILE = os.path.expanduser("~/Downloads/zero.txt")  # Path to the zeros file

# Parameters for analysis
FRESH_START_ZEROS = 5000
MINIMUM_FOR_STATS = 1000

# Create results directory if it doesn't exist
if not os.path.exists(RESULTS_DIR):
    os.makedirs(RESULTS_DIR)

# Global variable for shutdown control
shutdown_requested = False

def signal_handler(signum, frame):
    global shutdown_requested
    print(f"\n‚è∏Ô∏è Shutdown solicitado. Completando lote atual e salvando...")
    shutdown_requested = True

def load_zeros_from_file(filename):
    zeros = []
    try:
        print(f"üìÇ Carregando zeros do arquivo: {filename}")
        with open(filename, 'r') as f:
            for line_num, line in enumerate(f, start=1):
                if shutdown_requested:
                    break
                line = line.strip()
                if line:
                    try:
                        zero = float(line)
                        zeros.append((line_num, zero))  # Format: (index, value)
                    except ValueError:
                        print(f"‚ö†Ô∏è Linha inv√°lida {line_num}: '{line}'")
                        continue
        print(f"‚úÖ {len(zeros):,} zeros carregados")
        return zeros
    except Exception as e:
        print(f"‚ùå Erro ao ler arquivo: {e}")
        return []

def save_enhanced_cache(zeros, backup=True):
    try:
        if backup and os.path.exists(CACHE_FILE):
            backup_file = f"{CACHE_FILE}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            os.rename(CACHE_FILE, backup_file)
            print(f"üì¶ Backup do cache criado: {backup_file}")
        with open(CACHE_FILE, 'wb') as f:
            pickle.dump(zeros, f, protocol=pickle.HIGHEST_PROTOCOL)
        print(f"üíæ Cache salvo: {len(zeros)} zeros")
    except Exception as e:
        print(f"‚ùå Erro ao salvar cache: {e}")

def load_enhanced_cache():
    if os.path.exists(CACHE_FILE):
        try:
            with open(CACHE_FILE, 'rb') as f:
                data = pickle.load(f)
                if isinstance(data, list) and len(data) > 0:
                    print(f"‚úÖ Cache v√°lido: {len(data):,} zeros carregados")
                    return data
        except:
            print("‚ö†Ô∏è Cache inv√°lido, carregando do arquivo...")
    zeros = load_zeros_from_file(ZEROS_FILE)
    if zeros:
        save_enhanced_cache(zeros)
        return zeros[:FRESH_START_ZEROS] if FRESH_START_ZEROS > 0 else zeros
    return []

def find_multi_tolerance_resonances(zeros, constants_dict=None):
    if constants_dict is None:
        constants_dict = {'rydberg_scaled': RYDBERG_CONSTANT}
    all_results = {}
    for const_name, const_value in constants_dict.items():
        all_results[const_name] = {}
        for tolerance in TOLERANCE_LEVELS:
            resonances = []
            for n, gamma in zeros:
                mod_val = gamma % const_value
                min_distance = min(mod_val, const_value - mod_val)
                relative_error = min_distance / const_value  # Erro relativo
                if relative_error < tolerance:
                    resonances.append((n, gamma, min_distance, tolerance, relative_error))
            all_results[const_name][tolerance] = resonances
    return all_results

def enhanced_statistical_analysis(zeros, resonances, constant_value, tolerance):
    if len(zeros) == 0 or len(resonances) == 0:
        return None
    total_zeros = len(zeros)
    resonant_count = len(resonances)
    expected_random = total_zeros * (2 * tolerance)  # Toler√¢ncia relativa
    results = {
        'basic_stats': {
            'total_zeros': total_zeros,
            'resonant_count': resonant_count,
            'expected_random': expected_random,
            'resonance_rate': resonant_count / total_zeros,
            'significance_factor': resonant_count / expected_random if expected_random > 0 else float('inf')
        }
    }
    if expected_random >= 5:
        chi2_stat = (resonant_count - expected_random)**2 / expected_random
        chi2_pvalue = 1 - stats.chi2.cdf(chi2_stat, df=1)
        results['chi2_test'] = {
            'statistic': chi2_stat,
            'p_value': chi2_pvalue,
            'critical_value_05': 3.841,
            'significant': chi2_stat > 3.841
        }
    p_expected = 2 * tolerance  # Toler√¢ncia j√° √© relativa
    try:
        binom_result = stats.binomtest(resonant_count, total_zeros, p_expected, alternative='two-sided')
        binom_pvalue = binom_result.pvalue
    except AttributeError:
        try:
            binom_pvalue = stats.binom_test(resonant_count, total_zeros, p_expected, alternative='two-sided')
        except AttributeError:
            from scipy.stats import binom
            binom_pvalue = 2 * min(binom.cdf(resonant_count, total_zeros, p_expected),
                                  1 - binom.cdf(resonant_count - 1, total_zeros, p_expected))
    results['binomial_test'] = {
        'p_value': binom_pvalue,
        'significant': binom_pvalue < 0.05
    }
    poisson_pvalue = 1 - stats.poisson.cdf(resonant_count - 1, expected_random)
    results['poisson_test'] = {
        'p_value': poisson_pvalue,
        'significant': poisson_pvalue < 0.05
    }
    return results

def comparative_constant_analysis(zeros, tolerance=DEFAULT_TOLERANCE):
    multi_results = find_multi_tolerance_resonances(zeros, CONTROL_CONSTANTS)
    comparative_stats = {}
    for const_name, const_results in multi_results.items():
        if tolerance in const_results:
            resonances = const_results[tolerance]
            const_value = CONTROL_CONSTANTS[const_name]
            stats_result = enhanced_statistical_analysis(zeros, resonances, const_value, tolerance)
            comparative_stats[const_name] = {
                'constant_value': const_value,
                'resonance_count': len(resonances),
                'resonance_rate': len(resonances) / len(zeros) * 100,
                'stats': stats_result
            }
    return comparative_stats

def analyze_batch_enhanced(zeros, batch_num):
    print(f"\nüî¨ LOTE #{batch_num}: {len(zeros):,} zeros")
    if len(zeros) < MINIMUM_FOR_STATS:
        print(f"   üìä Necess√°rio {MINIMUM_FOR_STATS - len(zeros):,} mais zeros para estat√≠sticas")
        rydberg_results = find_multi_tolerance_resonances(zeros, {'rydberg_scaled': RYDBERG_CONSTANT})['rydberg_scaled']
        tolerance_summary = {}
        for tolerance in TOLERANCE_LEVELS[:3]:
            if tolerance in rydberg_results:
                resonances = rydberg_results[tolerance]
                count = len(resonances)
                rate = count / len(zeros) * 100 if len(zeros) > 0 else 0
                tolerance_summary[tolerance] = {
                    'count': count,
                    'rate': rate,
                    'best_quality': min(r[4] for r in resonances) if count > 0 else None,  # Erro relativo
                    'resonances': resonances,
                    'stats': None
                }
        print(f"\nüìä RESSON√ÇNCIAS B√ÅSICAS (RYDBERG):")
        print("| Toler√¢ncia | Contagem | Taxa (%) |")
        print("|------------|----------|----------|")
        for tolerance in TOLERANCE_LEVELS[:3]:
            if tolerance in tolerance_summary:
                data = tolerance_summary[tolerance]
                print(f"| {tolerance:8.0e} | {data['count']:8d} | {data['rate']:8.3f} |")
        return tolerance_summary, {}, None
    
    rydberg_results = find_multi_tolerance_resonances(zeros, {'rydberg_scaled': RYDBERG_CONSTANT})['rydberg_scaled']
    print(f"\nüìä RESSON√ÇNCIAS RYDBERG POR TOLER√ÇNCIA (R‚àû/10‚Å∂ = {RYDBERG_CONSTANT:.3f}):")
    print("| Toler√¢ncia | Contagem | Taxa (%) | Melhor Qualidade | Signific√¢ncia |")
    print("|------------|----------|----------|------------------|---------------|")
    tolerance_summary = {}
    for tolerance in TOLERANCE_LEVELS:
        if tolerance in rydberg_results:
            resonances = rydberg_results[tolerance]
            count = len(resonances)
            rate = count / len(zeros) * 100
            if count > 0:
                best_quality = min(r[4] for r in resonances)  # Erro relativo
                stats_result = enhanced_statistical_analysis(zeros, resonances, RYDBERG_CONSTANT, tolerance)
                sig_factor = stats_result['basic_stats']['significance_factor'] if stats_result else 0
                tolerance_summary[tolerance] = {
                    'count': count,
                    'rate': rate,
                    'best_quality': best_quality,
                    'significance': sig_factor,
                    'resonances': resonances,
                    'stats': stats_result
                }
                print(f"| {tolerance:8.0e} | {count:8d} | {rate:8.3f} | {best_quality:.3e} | {sig_factor:8.2f}x |")
            else:
                tolerance_summary[tolerance] = {
                    'count': 0, 'rate': 0, 'best_quality': None,
                    'significance': 0, 'resonances': [], 'stats': None
                }
                print(f"| {tolerance:8.0e} | {count:8d} | {rate:8.3f} |      N/A     |     N/A    |")
    
    print(f"\nüéõÔ∏è COMPARA√á√ÉO DE PAR√ÇMETROS RYDBERG (Toler√¢ncia: {DEFAULT_TOLERANCE}):")
    comparative_results = comparative_constant_analysis(zeros, DEFAULT_TOLERANCE)
    print("| Par√¢metro     | Valor          | Contagem | Taxa (%) | Signific√¢ncia |")
    print("|---------------|----------------|----------|----------|---------------|")
    for const_name, results in comparative_results.items():
        count = results['resonance_count']
        rate = results['resonance_rate']
        sig_factor = results['stats']['basic_stats']['significance_factor'] if results['stats'] else 0
        value = results['constant_value']
        value_str = f"{value:.3f}"
        print(f"| {const_name:13s} | {value_str:14s} | {count:8d} | {rate:8.3f} | {sig_factor:8.2f}x |")
    
    best_overall = None
    if DEFAULT_TOLERANCE in tolerance_summary and tolerance_summary[DEFAULT_TOLERANCE]['resonances']:
        best_overall = min(tolerance_summary[DEFAULT_TOLERANCE]['resonances'], key=lambda x: x[4])  # Por erro relativo
        print(f"\nüíé MELHOR RESSON√ÇNCIA RYDBERG (Toler√¢ncia: {DEFAULT_TOLERANCE}):")
        print(f"   Zero #{best_overall[0]:,} ‚Üí Œ≥ = {best_overall[1]:.15f}")
        print(f"   Œ≥ mod (R‚àû/10‚Å∂) = {best_overall[2]:.15e}")
        print(f"   Erro relativo: {best_overall[4]:.15e} ({best_overall[4]*100:.12f}%)")
        print(f"   Fator espectrosc√≥pico: Œ≥ = {best_overall[1]/RYDBERG_CONSTANT:.6f} √ó (R‚àû/10‚Å∂)")
        print(f"   N√∫mero qu√¢ntico efetivo: n_eff ‚âà {math.sqrt(best_overall[1]/RYDBERG_CONSTANT):.3f}")
        print(f"   Energia correspondente: E ‚âà -{13.6 * (best_overall[1]/RYDBERG_CONSTANT):.3f} eV")
        print(f"   Comprimento de onda: Œª ‚âà {91.1 / (best_overall[1]/RYDBERG_CONSTANT):.3f} nm")
    
    if DEFAULT_TOLERANCE in tolerance_summary and tolerance_summary[DEFAULT_TOLERANCE]['stats']:
        stats = tolerance_summary[DEFAULT_TOLERANCE]['stats']
        print(f"\nüìà TESTES ESTAT√çSTICOS RYDBERG (Toler√¢ncia: {DEFAULT_TOLERANCE}):")
        if 'chi2_test' in stats:
            chi2 = stats['chi2_test']
            print(f"   Qui-quadrado: œá¬≤ = {chi2['statistic']:.3f}, p = {chi2['p_value']:.6f}, Significativo: {'Sim' if chi2['significant'] else 'N√£o'}")
        if 'binomial_test' in stats:
            binom = stats['binomial_test']
            print(f"   Binomial: p = {binom['p_value']:.6f}, Significativo: {'Sim' if binom['significant'] else 'N√£o'}")
    
    return tolerance_summary, comparative_results, best_overall

def generate_comprehensive_report(zeros, session_results, final_batch):
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    report_file = os.path.join(RESULTS_DIR, f"Relatorio_Rydberg_{timestamp}.txt")
    final_tolerance_analysis, final_comparative, final_best = analyze_batch_enhanced(zeros, final_batch)
    
    with open(report_file, 'w', encoding='utf-8') as f:
        f.write("="*80 + "\n")
        f.write("ZVT RYDBERG RESONANCE HUNTER - RELAT√ìRIO COMPREENSIVO\n")
        f.write("="*80 + "\n\n")
        f.write(f"Data: {datetime.now().isoformat()}\n")
        f.write(f"Vers√£o: Rydberg Hunter v1.0\n")
        f.write(f"Lote Final: #{final_batch}\n")
        f.write(f"Zeros Analisados: {len(zeros):,}\n")
        f.write(f"Arquivo de Origem: {ZEROS_FILE}\n\n")
        f.write("CONFIGURA√á√ÉO RYDBERG:\n")
        f.write(f"Constante de Rydberg (R‚àû): {R_INFINITY:.15f} m‚Åª¬π\n")
        f.write(f"Energia de Rydberg: {E_RYDBERG:.15e} J ({E_RYDBERG/E_ELECTRON:.6f} eV)\n")
        f.write(f"Comprimento de onda de Rydberg: {LAMBDA_RYDBERG:.15e} m ({LAMBDA_RYDBERG*1e9:.1f} nm)\n")
        f.write(f"Frequ√™ncia de Rydberg: {FREQ_RYDBERG:.15e} Hz\n")
        f.write(f"Tempo de Rydberg: {TIME_RYDBERG:.15e} s\n")
        f.write(f"S√©rie de Lyman (fator): {LYMAN_FACTOR:.15f}\n")
        f.write(f"S√©rie de Balmer (fator): {BALMER_FACTOR:.15f}\n")
        f.write(f"S√©rie de Paschen (fator): {PASCHEN_FACTOR:.15f}\n")
        f.write(f"Toler√¢ncias: {TOLERANCE_LEVELS}\n")
        f.write(f"Toler√¢ncia Padr√£o: {DEFAULT_TOLERANCE}\n")
        f.write(f"Precis√£o: {mp.dps} casas decimais\n\n")
        f.write("AN√ÅLISE MULTI-TOLER√ÇNCIA (RYDBERG):\n")
        f.write("| Toler√¢ncia | Resson√¢ncias | Taxa (%) | Melhor Qualidade | Signific√¢ncia |\n")
        f.write("|------------|--------------|----------|------------------|---------------|\n")
        for tolerance in TOLERANCE_LEVELS:
            if tolerance in final_tolerance_analysis:
                data = final_tolerance_analysis[tolerance]
                best_quality = "N/A" if data['best_quality'] is None else f"{data['best_quality']:.3e}"
                significance = "N/A" if data['significance'] == 0 else f"{data['significance']:8.2f}"
                f.write(f"| {tolerance:8.0e} | {data['count']:10d} | {data['rate']:8.3f} | {best_quality:>11s} | {significance:>8s}x |\n")
        
        f.write(f"\nCOMPARA√á√ÉO DE PAR√ÇMETROS RYDBERG (Toler√¢ncia: {DEFAULT_TOLERANCE}):\n")
        f.write("| Par√¢metro     | Valor              | Resson√¢ncias | Taxa (%) | Signific√¢ncia |\n")
        f.write("|---------------|--------------------|--------------|----------|---------------|\n")
        for const_name, results in final_comparative.items():
            value_str = f"{results['constant_value']:.6f}"
            sig_factor = results['stats']['basic_stats']['significance_factor'] if results['stats'] else 0
            f.write(f"| {const_name:13s} | {value_str:18s} | {results['resonance_count']:10d} | {results['resonance_rate']:8.3f} | {sig_factor:8.2f}x |\n")
        
        if final_best:
            f.write(f"\nMELHOR RESSON√ÇNCIA RYDBERG:\n")
            f.write(f"√çndice do Zero: #{final_best[0]:,}\n")
            f.write(f"Valor Gamma: {final_best[1]:.20f}\n")
            f.write(f"Qualidade Absoluta: {final_best[2]:.20e}\n")
            f.write(f"Qualidade Relativa: {final_best[4]:.20e}\n")
            f.write(f"Erro Relativo: {final_best[4]*100:.12f}%\n")
            f.write(f"Fator Espectrosc√≥pico: {final_best[1]/RYDBERG_CONSTANT:.6e}\n")
            f.write(f"N√∫mero Qu√¢ntico Efetivo: {math.sqrt(final_best[1]/RYDBERG_CONSTANT):.6f}\n")
            f.write(f"Energia At√¥mica: {-13.6 * (final_best[1]/RYDBERG_CONSTANT):.6f} eV\n")
            f.write(f"Comprimento de Onda: {91.1 / (final_best[1]/RYDBERG_CONSTANT):.3f} nm\n")
            f.write(f"Rela√ß√£o Espectral: Œ≥ = {final_best[1]/RYDBERG_CONSTANT:.3e} √ó (R‚àû/10‚Å∂)\n\n")
        else:
            f.write(f"\nNENHUMA RESSON√ÇNCIA RYDBERG ENCONTRADA nas toler√¢ncias testadas.\n\n")
        
        if DEFAULT_TOLERANCE in final_tolerance_analysis and final_tolerance_analysis[DEFAULT_TOLERANCE]['stats']:
            stats = final_tolerance_analysis[DEFAULT_TOLERANCE]['stats']
            f.write("RESUMO ESTAT√çSTICO:\n")
            basic = stats['basic_stats']
            f.write(f"  Zeros Totais: {basic['total_zeros']:,}\n")
            f.write(f"  Zeros Ressonantes: {basic['resonant_count']:,}\n")
            f.write(f"  Esperado por Acaso: {basic['expected_random']:.1f}\n")
            f.write(f"  Taxa de Resson√¢ncia: {basic['resonance_rate']*100:.6f}%\n")
            f.write(f"  Signific√¢ncia: {basic['significance_factor']:.3f}x\n")
            if 'chi2_test' in stats:
                f.write(f"  Qui-quadrado: œá¬≤ = {stats['chi2_test']['statistic']:.3f}, p = {stats['chi2_test']['p_value']:.6f}\n")
            if 'binomial_test' in stats:
                f.write(f"  Binomial: p = {stats['binomial_test']['p_value']:.6f}\n")
        
        f.write("\nIMPLICA√á√ïES PARA F√çSICA AT√îMICA:\n")
        f.write("1. Investigar conex√µes entre zeros de Riemann e espectroscopia at√¥mica\n")
        f.write("2. Analisar rela√ß√µes com estrutura fina dos n√≠veis de energia\n")
        f.write("3. Considerar implica√ß√µes para teoria qu√¢ntica do √°tomo de hidrog√™nio\n")
        f.write("4. Explorar conex√µes com s√©ries espectrais e n√∫meros qu√¢nticos\n")
        f.write("5. Avaliar potencial para predi√ß√µes espectrais baseadas em zeros\n")
        f.write("="*80 + "\n")
    
    print(f"üìä Relat√≥rio Rydberg salvo: {report_file}")
    return report_file

def infinite_hunter_rydberg():
    global shutdown_requested
    print(f"üöÄ ZVT RYDBERG RESONANCE HUNTER")
    print(f"‚öõÔ∏è Constante de Rydberg R‚àû = {R_INFINITY:.6f} m‚Åª¬π")
    print(f"üî¨ Par√¢metro Principal = {RYDBERG_CONSTANT:.3f}")
    print(f"üìÅ Arquivo: {ZEROS_FILE}")
    print(f"üìä Toler√¢ncias: {TOLERANCE_LEVELS}")
    print("üõë Ctrl+C para parar")
    print("=" * 80)
    
    all_zeros = load_enhanced_cache()
    current_count = len(all_zeros)
    if current_count == 0:
        print("‚ùå Nenhum zero carregado. Verifique o arquivo.")
        return [], [], None
    
    print(f"üìä Zeros dispon√≠veis: {current_count:,}")
    session_results = []
    best_overall = None
    batch_num = 1
    
    for i in range(0, current_count, INCREMENT):
        if shutdown_requested:
            break
        batch_start = i
        batch_end = min(i + INCREMENT, current_count)
        batch = all_zeros[batch_start:batch_end]
        print(f"\nüî¨ LOTE #{batch_num}: Zeros {batch_start:,} a {batch_end:,}")
        start_time = time.time()
        tolerance_analysis, comparative_analysis, batch_best = analyze_batch_enhanced(batch, batch_num)
        if batch_best and (not best_overall or batch_best[4] < best_overall[4]):  # Comparar por erro relativo
            best_overall = batch_best
            print(f"    üéØ NOVO MELHOR GLOBAL RYDBERG!")
            print(f"    Zero #{best_overall[0]:,} ‚Üí Œ≥ mod R‚àû = {best_overall[2]:.15e}")
        session_results.append({
            'batch': batch_num,
            'timestamp': datetime.now().isoformat(),
            'zeros_analyzed': batch_end,
            'batch_time': time.time() - start_time,
            'tolerance_analysis': tolerance_analysis,
            'comparative_analysis': comparative_analysis,
            'best_resonance': batch_best
        })
        batch_num += 1
    
    print(f"\nüìä Gerando relat√≥rio final Rydberg...")
    generate_comprehensive_report(all_zeros, session_results, batch_num-1)
    return all_zeros, session_results, best_overall

def main():
    """Fun√ß√£o principal"""
    global shutdown_requested
    print("üåü Iniciando ZVT Rydberg Resonance Hunter")
    
    try:
        zeros, results, best = infinite_hunter_rydberg()
        
        if zeros and len(zeros) > 0:
            print(f"\nüéØ An√°lise Rydberg Conclu√≠da!")
            print(f"üìÅ Resultados em: {RESULTS_DIR}/")
            print(f"üíæ Cache: {CACHE_FILE}")
            print(f"üìä Estat√≠sticas: {STATS_FILE}")
            
            if best:
                print(f"üèÜ Melhor resson√¢ncia: Zero #{best[0]:,} com qualidade relativa {best[4]:.3e}")
                print(f"‚öõÔ∏è Fator espectrosc√≥pico: Œ≥ = {best[1]/RYDBERG_CONSTANT:.3e} √ó (R‚àû/10‚Å∂)")
                print(f"üî¨ N√∫mero qu√¢ntico efetivo: n_eff ‚âà {math.sqrt(best[1]/RYDBERG_CONSTANT):.3f}")
                print(f"üí° Energia: E ‚âà {-13.6 * (best[1]/RYDBERG_CONSTANT):.3f} eV")
            else:
                print(f"üìä Nenhuma resson√¢ncia Rydberg excepcional encontrada")
                print(f"ü§î Zeros de Riemann podem ser independentes da espectroscopia at√¥mica")
                
    except KeyboardInterrupt:
        print(f"\n‚èπÔ∏è An√°lise interrompida. Progresso salvo.")
        
    except Exception as e:
        print(f"\n‚ùå Erro: {e}")
        import traceback
        traceback.print_exc()
        
    finally:
        print(f"\nüî¨ Sess√£o Rydberg conclu√≠da!")

if __name__ == "__main__":
    shutdown_requested = False
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    main()
